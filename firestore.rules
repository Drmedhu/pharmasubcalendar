rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (list) Listing user profiles is not allowed.
     * @principle Enforces user-ownership.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to pharmacy documents.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) Authenticated user can create a pharmacy with their userId.
     * @allow (get) Any authenticated user can get a pharmacy.
     * @allow (list) Any authenticated user can list pharmacies.
     * @allow (update) Authenticated user can update a pharmacy if they are the owner.
     * @allow (delete) Authenticated user can delete a pharmacy if they are the owner.
     * @principle Enforces user-ownership.
     */
    match /pharmacies/{pharmacyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

        function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Grants access to shift documents.
     * @path /shifts/{shiftId}
     * @allow (create) Authenticated user can create a shift.
     * @allow (get) Any authenticated user can get a shift.
     * @allow (list) Any authenticated user can list shifts.
     * @allow (update) Authenticated user can update a shift if they are the owner.
     * @allow (delete) Authenticated user can delete a shift if they are the owner.
     * @principle Enforces user-ownership.
     */
    match /shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

       function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner();
    }
  }
}