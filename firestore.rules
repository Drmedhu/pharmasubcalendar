/**
 * @fileoverview Firestore Security Rules for shift scheduling app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for pharmacies, shifts and user profiles.
 * Only authenticated users can create, update, or delete data they own. Public listing of user profiles is disallowed.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Pharmacy profiles, owned by a user.
 * - /shifts/{shiftId}: Shift postings, owned by a pharmacy and a user.
 * - /userProfiles/{userId}: User profiles, one per user, with the userId as the document ID.
 *
 * Key Security Decisions:
 * - User profiles are not publicly listable. This prevents enumeration of users.
 * - All write operations require authentication.
 * - Data consistency is enforced between the path and the document's internal userId.
 * - Ownership is determined by the userId field in the document.
 *
 * Denormalization for Authorization:
 *  The `userId` field is present on all documents, enabling efficient ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the user ID in the request matches the user ID in the document.
     */
    function isValidUserId(userId) {
        return request.resource.data.userId == userId;
    }

    /**
     * @description Rules for the /pharmacies collection.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user123' creates a pharmacy with pharmacyId 'pharmacy456' and userId 'user123'.
     * @deny (create) User with UID 'user123' creates a pharmacy with pharmacyId 'pharmacy456' and userId 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isValidUserId(request.auth.uid);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /shifts collection.
     * @path /shifts/{shiftId}
     * @allow (create) User with UID 'user123' creates a shift with userId 'user123'.
     * @deny (create) User with UID 'user123' creates a shift with userId 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isValidUserId(request.auth.uid);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /userProfiles collection.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user123' creates a profile with userId 'user123'.
     * @deny (create) User with UID 'user123' creates a profile with userId 'user456'.
     * @principle Enforces document ownership for writes and validates data consistency.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidUserId(userId);
      allow update: if isExistingOwner(userId) && isValidUserId(userId);
      allow delete: if isExistingOwner(userId) && isValidUserId(userId);
    }
  }
}