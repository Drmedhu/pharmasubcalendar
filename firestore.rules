/**
 * @fileoverview Firestore Security Rules for Shift Relief App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a pharmacy-ownership model for pharmacies and shifts.
 * Users can only read and write their own profiles. Pharmacies can create, update, and delete shifts they own.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data, with the document ID matching the Firebase Auth UID.
 * - /pharmacies/{pharmacyId}: Stores pharmacy data.
 * - /shifts/{shiftId}: Stores shift data, associated with a pharmacy via the pharmacyId field.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Pharmacies and Shifts are accessible only to their owning user.
 * - Listing of user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - Shifts contain a `userId` field to indicate the user that created the shift, enabling owner-based security rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profiles. Only the user can read and write their own profile.
     * @path /userProfiles/{userId}
     * @allow (get) User with UID 'user123' can read their own profile document at /userProfiles/user123.
     * @allow (create) User with UID 'user123' can create their own profile document at /userProfiles/user123, setting the userId to 'user123'.
     * @allow (update) User with UID 'user123' can update their own profile document at /userProfiles/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile document at /userProfiles/user123.
     * @deny (get) User with UID 'user456' cannot read the profile document of user 'user123' at /userProfiles/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document for user 'user123' at /userProfiles/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for pharmacies.  Pharmacies are created by a user and associated via userId.
     * @path /pharmacies/{pharmacyId}
     * @allow (get) Any signed-in user can read a pharmacy's information.
     * @allow (list) Any signed-in user can list pharmacies.
     * @allow (create) A signed-in user can create a pharmacy.  The 'userId' must match the user's UID.
     * @allow (update) A signed-in user can update a pharmacy if they are the owner (userId matches).
     * @allow (delete) A signed-in user can delete a pharmacy if they are the owner.
     * @deny (create) A user cannot create a pharmacy with a mismatched userId.
     * @principle Enforces ownership for pharmacy creation and modification.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isPharmacyOwner(pharmacyId);
      allow delete: if isPharmacyOwner(pharmacyId);
    }

    /**
     * @description Rules for shifts. Shifts are created by pharmacies and associated via pharmacyId and userId.
     * @path /shifts/{shiftId}
     * @allow (get) Any signed-in user can read a shift's information.
     * @allow (list) Any signed-in user can list shifts.
     * @allow (create) A signed-in user can create a shift if the pharmacy's userId matches the user's UID.
     * @allow (update) A signed-in user can update a shift if they are the owner (userId matches).
     * @allow (delete) A signed-in user can delete a shift if they are the owner.
     * @deny (create) A user cannot create a shift with a mismatched userId.
     * @principle Enforces ownership for shift creation and modification.
     */
    match /shifts/{shiftId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isPharmacyOwnerForShiftCreation(request.resource.data.pharmacyId);
      allow update: if isShiftOwner(shiftId);
      allow delete: if isShiftOwner(shiftId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isPharmacyOwner(pharmacyId) {
    return get(/databases/$(database)/documents/pharmacies/$(pharmacyId)).data.userId == request.auth.uid;
  }

  function isPharmacyOwnerForShiftCreation(pharmacyId) {
    return get(/databases/$(database)/documents/pharmacies/$(pharmacyId)).data.userId == request.auth.uid;
  }

  function isShiftOwner(shiftId) {
    let pharmacyId = get(/databases/$(database)/documents/shifts/$(shiftId)).data.pharmacyId;
    return get(/databases/$(database)/documents/pharmacies/$(pharmacyId)).data.userId == request.auth.uid;
  }
}