/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and role-based access control where applicable.
 * It avoids complex data validation to enable rapid prototyping, focusing instead on authorization.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profiles, keyed by user ID.
 *
 * Key Security Decisions:
 * - Pharmacies can only be created by authenticated users.
 * - Pharmacies are only listable for logged in users, for now.
 * - Shifts are globally readable but only writable by authenticated users that owns it.
 * - User profiles are readable and writable only by the owning user.
 *
 * Denormalization for Authorization:
 * - The `Pharmacy` and `Shift` entities both contain a `userId` field which is used to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows listing pharmacies to authenticated users, and only allows creating, updating, and deleting pharmacies to the owning user.
     * @path /pharmacies/{pharmacyId}
     * @allow (list) User with any valid auth can list.
     * @allow (create) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can create a pharmacy with userId: 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @allow (update) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can update a pharmacy they own.
     * @allow (delete) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can delete a pharmacy they own.
     * @deny (create) User with auth 'evilUser' cannot create a pharmacy with userId: 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @deny (update) User with auth 'evilUser' cannot update a pharmacy owned by 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @deny (delete) User with auth 'evilUser' cannot delete a pharmacy owned by 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @principle Enforces document ownership for writes; public read.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to shifts, but restricts creation, updates, and deletes to the owning user.
     * @path /shifts/{shiftId}
     * @allow (get, list) Any user can read.
     * @allow (create) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can create a shift with userId: 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @allow (update) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can update a shift they own.
     * @allow (delete) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can delete a shift they own.
     * @deny (create) User with auth 'evilUser' cannot create a shift with userId: 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @deny (update) User with auth 'evilUser' cannot update a shift owned by 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @deny (delete) User with auth 'evilUser' cannot delete a shift owned by 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @principle Enforces document ownership for writes; public read.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows users to read and write their own profiles.
     * @path /userProfiles/{userId}
     * @allow (get, list) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can read their own profile.
     * @allow (create, update, delete) User with auth 'bjoekd4vPaNKIrw2E39UlPqDbxj1' can create, update, and delete their own profile.
     * @deny (get, list) User with auth 'evilUser' cannot read the profile of 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @deny (create, update, delete) User with auth 'evilUser' cannot create, update, or delete the profile of 'bjoekd4vPaNKIrw2E39UlPqDbxj1'.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}