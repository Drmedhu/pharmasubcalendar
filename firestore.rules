rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user profiles and pharmacies,
     *              allowing only the owning user to read and write their own data. Shifts are
     *              publicly readable but only writable by the user who created them.
     * @dataStructure
     * - /userProfiles/{userId}: Stores user profile data, accessible only to the user.
     * - /pharmacies/{pharmacyId}: Stores pharmacy data, accessible only to the pharmacy owner.
     * - /shifts/{shiftId}: Stores shift data. Readable by anyone, but only writable by the shift creator.
     * @keySecurityDecisions
     * - Users can only access their own user profile.
     * - Pharmacies can only be created, updated, or deleted by their owner.
     * - Shifts are publicly readable to facilitate discovery.
     * @denormalizationForAuthorization
     * - Pharmacies and shifts both include a `userId` field to simplify ownership checks.
     * - Shifts include `pharmacyId` for easy association with the pharmacy that posted it.
     */

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to user profile data only to the user themselves.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their own profile at /userProfiles/user123.
     * @allow (create) User with ID 'user123' can create their own profile at /userProfiles/user123, provided the document's userId field matches.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of user 'user123' at /userProfiles/user123.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to pharmacy data only to the pharmacy owner.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their own pharmacy at /pharmacies/pharmacy123 if pharmacy.userId == 'user123'.
     * @allow (create) User with ID 'user123' can create a pharmacy at /pharmacies/pharmacy123 if request.resource.data.userId == 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the pharmacy owned by user 'user123' at /pharmacies/pharmacy123.
     * @principle Enforces strict user-ownership for pharmacy data.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows anyone to read shifts, but only the owner to create, update, or delete them.
     * @path /shifts/{shiftId}
     * @allow (get, list) Any user can read or list shifts.
     * @allow (create) User with ID 'user123' can create a shift at /shifts/shift123 if request.resource.data.userId == 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update or delete the shift owned by user 'user123' at /shifts/shift123.
     * @principle Allows public read access but restricts write access to the shift creator.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}