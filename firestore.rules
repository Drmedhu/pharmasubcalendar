/**
 * @fileoverview Firestore Security Rules for the PharmAssist application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies, shifts and user profiles.
 * Pharmacies and shifts can only be created, updated, or deleted by their respective owners.
 * User profiles can be created and managed by the respective users.
 * Public read access is not allowed for any collection.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Listing of pharmacies, shifts and user profiles is only allowed by the owners.
 * - Data validation is relaxed in the prototyping phase to allow flexible data shapes.
 * - The `userId` field is used for ownership checks.
 *
 * Denormalization for Authorization:
 *  - Pharmacies and shifts have a `userId` field that stores the ID of the user who created them. This allows for easy ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /pharmacies/{pharmacyId} collection.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) - User with auth UID creates a pharmacy, with pharmacy.userId matching auth UID.
     * @deny (create) - User tries to create a pharmacy with a pharmacy.userId that does not match their auth UID.
     * @allow (get, list) - User with auth UID gets a pharmacy with pharmacy.userId matching auth UID.
     * @deny (get, list) - User tries to get a pharmacy with a pharmacy.userId that does not match their auth UID.
     * @allow (update, delete) - User with auth UID updates or deletes a pharmacy, with pharmacy.userId matching auth UID.
     * @deny (update, delete) - User tries to update or delete a pharmacy with a pharmacy.userId that does not match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to the /shifts/{shiftId} collection.
     * @path /shifts/{shiftId}
     * @allow (create) - User with auth UID creates a shift, with shift.userId matching auth UID.
     * @deny (create) - User tries to create a shift with a shift.userId that does not match their auth UID.
     * @allow (get, list) - User with auth UID gets a shift with shift.userId matching auth UID.
     * @deny (get, list) - User tries to get a shift with a shift.userId that does not match their auth UID.
     * @allow (update, delete) - User with auth UID updates or deletes a shift, with shift.userId matching auth UID.
     * @deny (update, delete) - User tries to update or delete a shift with a shift.userId that does not match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to the /userProfiles/{userId} collection.
     * @path /userProfiles/{userId}
     * @allow (create) - User with auth UID creates a user profile where the document ID matches the auth UID.
     * @deny (create) - User tries to create a user profile where the document ID does not match their auth UID.
     * @allow (get, list) - User with auth UID gets their own user profile.
     * @deny (get, list) - User tries to get another user's profile.
     * @allow (update, delete) - User with auth UID updates or deletes their own user profile.
     * @deny (update, delete) - User tries to update or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}