/**
 * @fileoverview Firestore Security Rules for the shifts application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies and shifts,
 * ensuring that only the creator can modify or delete them. User profiles
 * are also protected by an ownership model.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profiles, with the document ID matching the user's UID.
 *
 * Key Security Decisions:
 * - Pharmacies and shifts can only be created, updated, or deleted by their respective owners.
 * - User profiles can only be created and modified by the authenticated user.
 *
 * Admin Access:
 * - An admin user with the email 'erno.santha@drmed.hu' has full read and write access to all data.
 *
 * Denormalization for Authorization:
 * - The `userId` field within the Pharmacy and Shift documents is used to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to pharmacies based on ownership.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user_abc' can create a pharmacy if pharmacy.userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a pharmacy if pharmacy.userId != 'user_xyz'.
     * @allow (get, list) Admin user can read any pharmacy.
     * @allow (update, delete) User with UID 'user_abc' can update/delete a pharmacy if pharmacy.userId == 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete a pharmacy if pharmacy.userId != 'user_xyz'.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access to shifts based on ownership.
     * @path /shifts/{shiftId}
     * @allow (create) User with UID 'user_abc' can create a shift if shift.userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a shift if shift.userId != 'user_xyz'.
     * @allow (get, list) Admin user can read any shift.
     * @allow (update, delete) User with UID 'user_abc' can update/delete a shift if shift.userId == 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete a shift if shift.userId != 'user_xyz'.
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for userId 'user_abc'.
     * @allow (get, list) User can only access its profile.
     * @allow (update) User with UID 'user_abc' can update their profile if userId == 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile for userId 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return request.auth.token.email == 'erno.santha@drmed.hu';
    }
  }
}