/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing ownership and restricting access to data based on user roles and relationships.
 * It is written in "Prototyping Mode" meaning we focus on authorization and less on input data validation, to allow for rapid iteration.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, with 'pharmacyId' as the document ID.
 * - /shifts/{shiftId}: Stores shift information.
 *
 * Key Security Decisions:
 * - Pharmacies are publicly readable but only created/updated/deleted by their owner (creator's userId)
 * - Shifts are publicly readable. Shifts are created/updated/deleted only by their owner (creator's userId)
 *
 * Denormalization for Authorization:
 *  - Each Pharmacy and Shift document includes a `userId` field, which is used for ownership checks. This avoids the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to pharmacies, but restricts write access to the owner.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list): Any user can read pharmacy data.
     * @allow (create): Only the user who created the pharmacy can create it, and the userId must match.
     * @allow (update, delete): Only the user who created the pharmacy can update or delete it.
     * @deny (create): If the userId does not match the authenticated user.
     * @deny (update, delete): If the user is not the owner of the pharmacy.
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants public read access to shifts, but restricts write access to the owner.
     * @path /shifts/{shiftId}
     * @allow (get, list): Any user can read shift data.
     * @allow (create): Only the user who created the shift can create it, and the userId must match.
     * @allow (update, delete): Only the user who created the shift can update or delete it.
     * @deny (create): If the userId does not match the authenticated user.
     * @deny (update, delete): If the user is not the owner of the shift.
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the resource and the resource exists.
      * @param {string} userId The user ID to compare against.
      * @return {bool} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}