/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for pharmacies and shifts. Pharmacies can only be created, updated, or deleted by their owners. Shifts can be created by pharmacy owners.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, owned by a user.
 * - /shifts/{shiftId}: Stores shift information, associated with a pharmacy.
 * - /userProfiles/{userId}: Stores user profile information, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Pharmacies and shifts are not publicly readable.
 * - The `userId` field in both `Pharmacy` and `Shift` entities is used to enforce ownership. This ID MUST match `request.auth.uid`.
 *
 * Denormalization for Authorization:
 * - The `userId` field is present in both `Pharmacy` and `Shift` documents, allowing for simple ownership checks without additional `get()` calls.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to the pharmacies collection.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) - User with auth UID 'user123' can create a pharmacy with pharmacyId 'pharmacy456' if the pharmacy's userId is also 'user123'.
     * @allow (update) - User with auth UID 'user123' can update pharmacy 'pharmacy456' if they own it.
     * @allow (delete) - User with auth UID 'user123' can delete pharmacy 'pharmacy456' if they own it.
     * @deny (create) - User with auth UID 'user456' cannot create pharmacy 'pharmacy456' if the pharmacy's userId is 'user123'.
     * @deny (update) - User with auth UID 'user456' cannot update pharmacy 'pharmacy456' if they don't own it.
     * @deny (delete) - User with auth UID 'user456' cannot delete pharmacy 'pharmacy456' if they don't own it.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows access to the shifts collection.
     * @path /shifts/{shiftId}
     * @allow (create) - User with auth UID 'user123' can create a shift with shiftId 'shift789' if the shift's userId is also 'user123'.
     * @allow (update) - User with auth UID 'user123' can update shift 'shift789' if they own the pharmacy that created the shift.
     * @allow (delete) - User with auth UID 'user123' can delete shift 'shift789' if they own the pharmacy that created the shift.
     * @deny (create) - User with auth UID 'user456' cannot create shift 'shift789' if the shift's userId is 'user123'.
     * @deny (update) - User with auth UID 'user456' cannot update shift 'shift789' if they don't own the pharmacy that created the shift.
     * @deny (delete) - User with auth UID 'user456' cannot delete shift 'shift789' if they don't own the pharmacy that created the shift.
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

        /**
         * @description Allows access to the userProfiles collection.
         * @path /userProfiles/{userId}
         * @allow (create) - User can create their own profile if the userId in the document matches their auth UID.
         * @allow (update) - User can update their own profile if the userId in the document matches their auth UID.
         * @allow (delete) - User can delete their own profile if the userId in the document matches their auth UID.
         * @deny (create) - User cannot create a profile for another user.
         * @deny (update) - User cannot update another user's profile.
         * @deny (delete) - User cannot delete another user's profile.
         * @principle Enforces user ownership for profile data.
         */
        match /userProfiles/{userId} {
            function isOwner(userId) {
                return request.auth != null && request.auth.uid == userId;
            }

            function isExistingOwner(userId) {
                return isOwner(userId) && resource != null;
            }

            allow get: if isOwner(userId);
            allow list: if false;
            allow create: if isOwner(userId) && (request.resource.data.userId == userId);
            allow update: if isExistingOwner(resource.data.userId) && (request.resource.data.userId == resource.data.userId);
            allow delete: if isExistingOwner(resource.data.userId);
        }
  }
}