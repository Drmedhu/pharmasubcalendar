/**
 * @fileoverview Firestore Security Rules for PharmaSub Calendar.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles
 * and path-based authorization independence for pharmacies and shifts.
 *
 * Data Structure:
 * - User profiles are stored under /userProfiles/{userId}, ensuring only the
 *   authenticated user can access their profile.
 * - Pharmacies are stored under /pharmacies/{pharmacyId}.
 * - Shifts are stored under /pharmacies/{pharmacyId}/shifts/{shiftId}, with the
 *   pharmacyId denormalized into the shift document for authorization independence.
 *
 * Key Security Decisions:
 * - Users can only access their own profile.
 * - Pharmacies have full control over their shifts.
 * - Listing user profiles is not allowed to protect user privacy.
 *
 * Denormalization for Authorization: The `pharmacyId` is denormalized within the
 * `Shift` document to allow shift creation and updates without needing to read
 * the parent pharmacy document.
 *
 * Structural Segregation:  This ruleset uses path-based ownership to segregate user
 * profiles, ensuring users only have access to their own data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the authenticated user can access their profile.
     * @path /userProfiles/{userId}
     * @allow (get) Authenticated user with UID '6g1XplP1ONTtZZxFEJkHEQWIUMf1' reading their own profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @deny (get) Authenticated user with UID 'otherUserId' attempting to read the profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @allow (create) Authenticated user with UID '6g1XplP1ONTtZZxFEJkHEQWIUMf1' creating their own profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @deny (create) Authenticated user with UID 'otherUserId' attempting to create a profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @allow (update) Authenticated user with UID '6g1XplP1ONTtZZxFEJkHEQWIUMf1' updating their own profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @deny (update) Authenticated user with UID 'otherUserId' attempting to update the profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @allow (delete) Authenticated user with UID '6g1XplP1ONTtZZxFEJkHEQWIUMf1' deleting their own profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @deny (delete) Authenticated user with UID 'otherUserId' attempting to delete the profile at /userProfiles/6g1XplP1ONTtZZxFEJkHEQWIUMf1.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to pharmacy information.
     * @path /pharmacies/{pharmacyId}
     * @allow (get) Any user can read pharmacy information.
     * @allow (list) Any user can list pharmacies.
     * @allow (create) Any authenticated user can create a pharmacy.
     * @deny (create) Unauthenticated user attempting to create a pharmacy.
     * @allow (update) Any authenticated user can update a pharmacy.
     * @deny (update) Unauthenticated user attempting to update a pharmacy.
     * @allow (delete) Any authenticated user can delete a pharmacy.
     * @deny (delete) Unauthenticated user attempting to delete a pharmacy.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages shifts for a specific pharmacy. The pharmacy can manage their shifts.
     * @path /pharmacies/{pharmacyId}/shifts/{shiftId}
     * @allow (get) Any user can read shift information.
     * @allow (list) Any user can list shifts for a pharmacy.
     * @allow (create) Authenticated user creating a shift for their pharmacy. The pharmacyId must match the path.
     * @deny (create) Authenticated user creating a shift for a different pharmacy.
     * @allow (update) Authenticated user updating a shift for their pharmacy. The pharmacyId must match the path, and the shift must exist.
     * @deny (update) Authenticated user updating a shift for a different pharmacy, or a non-existent shift.
     * @allow (delete) Authenticated user deleting a shift for their pharmacy. The pharmacyId must match the path, and the shift must exist.
     * @deny (delete) Authenticated user deleting a shift for a different pharmacy, or a non-existent shift.
     * @principle Enforces pharmacy ownership for shift management.
     */
    match /pharmacies/{pharmacyId}/shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.pharmacyId == pharmacyId;
      allow update: if isSignedIn() && resource != null && resource.data.pharmacyId == pharmacyId;
      allow delete: if isSignedIn() && resource != null && resource.data.pharmacyId == pharmacyId;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}