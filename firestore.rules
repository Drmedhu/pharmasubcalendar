/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for pharmacies and shifts.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, accessible only to the owning user.
 * - /shifts/{shiftId}: Stores shift information, accessible only to the owning user (pharmacy who created it).
 * - /userProfiles/{userId}: Stores user profile information. Only the authenticated user can read/write their own profile.
 *
 * Key Security Decisions:
 * - Pharmacies and Shifts can only be created by authenticated users.
 * - Pharmacies and Shifts are owned by the user who created them, enforced via the `userId` field.
 * - Listing of all shifts is allowed for any logged in user.
 *
 * Denormalization for Authorization:
 * - The `userId` field is used in both `/pharmacies` and `/shifts` to identify the owner and is validated on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to manage their own pharmacy profiles.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) - Authenticated user with matching userId in the document.
     * @allow (get, update, delete) - Authenticated user who is the owner of the pharmacy.
     * @deny (create) - If the userId in the request does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the owner of the pharmacy.
     * @principle Enforces document ownership for pharmacies.
     */
    match /pharmacies/{pharmacyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows authenticated users to create and manage shifts they own.
     * @path /shifts/{shiftId}
     * @allow (create) - Authenticated user with matching userId in the document.
     * @allow (get, update, delete) - Authenticated user who is the owner of the shift (creator).
     * @deny (create) - If the userId in the request does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the owner of the shift.
     * @principle Enforces document ownership for shifts.
     */
    match /shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows authenticated users to manage their own user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) - Authenticated user creating their own profile.
     * @allow (get, update, delete) - Authenticated user accessing their own profile.
     * @deny (create) - If the userId in the request does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the owner of the profile.
     * @principle Enforces user-owned profile access.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User profiles should not be listable.
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}