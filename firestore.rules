/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Firestore database, enforcing a combination of ownership-based and public-read access patterns.
 *
 * Core Philosophy:
 *  - Strict ownership model for user-specific data. Users can only create, read, update, and delete their own data.
 *  - Public read access to pharmacies and shifts, but only owners (pharmacies) can modify shifts.
 *
 * Data Structure:
 *  - /pharmacies/{pharmacyId}: Stores pharmacy profiles, secured by the pharmacy's user ID.
 *  - /shifts/{shiftId}: Stores shift information, readable by anyone, but writable only by the associated pharmacy owner.
 *  - /userProfiles/{userId}: Stores user profile data, accessible only by the user themselves.
 *
 * Key Security Decisions:
 *  - Pharmacies and shifts are publicly readable to allow for easy discovery.
 *  - Pharmacies must set their `userId` field correctly on creation, matching their authentication UID. This cannot be changed after creation.
 *
 * Denormalization for Authorization:
 *  - The `Pharmacy` entity requires a `userId` field for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read a pharmacy's information, but only the pharmacy owner can create, update, or delete it.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list): Any user can read pharmacy information.
     * @allow (create): User with UID 'user123' can create a pharmacy with pharmacy.userId == 'user123'.
     * @allow (update, delete): User with UID 'user123' can update/delete pharmacy 'pharmacyId' if pharmacy.userId == 'user123'.
     * @deny (create): User attempts to create a pharmacy with pharmacy.userId != request.auth.uid.
     * @deny (update, delete): User with UID 'otherUser' attempts to update/delete pharmacy 'pharmacyId' where pharmacy.userId == 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows anyone to read shift information, but only the pharmacy owner can create, update, or delete it.
     * @path /shifts/{shiftId}
     * @allow (get, list): Any user can read shift information.
     * @allow (create): User with UID 'user123' can create a shift associated with pharmacy 'pharmacyId' if that pharmacy's userId is 'user123'.
     * @allow (update, delete): User with UID 'user123' can update/delete shift 'shiftId' if the shift's associated pharmacy's userId is 'user123'.
     * @deny (create): User attempts to create a shift associated with a pharmacy they don't own.
     * @deny (update, delete): User with UID 'otherUser' attempts to update/delete shift 'shiftId' associated with a pharmacy owned by 'user123'.
     * @principle Allows public read access but enforces ownership (via the pharmacyId relationship) for writes.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && pharmacyOwnerMatchesShift(request.resource.data.pharmacyId, request.auth.uid);
      allow update, delete: if isSignedIn() && isExistingShiftOwner(resource.data.pharmacyId);
    }

    /**
     * @description Enforces strict ownership for user profiles. Each user can only read, create, update, and delete their own profile.
     * @path /userProfiles/{userId}
     * @allow (create): User with UID 'user123' can create their own profile at /userProfiles/user123.
     * @allow (get, list, update, delete): User with UID 'user123' can read, update, and delete their own profile at /userProfiles/user123.
     * @deny (create): User attempts to create a profile with a userId that doesn't match their auth UID.
     * @deny (get, list, update, delete): User with UID 'otherUser' attempts to access /userProfiles/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      allow create: if isSignedIn() && isOwner(userId) ;
      allow get, list, update, delete: if isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isExistingShiftOwner(pharmacyId) {
        return isSignedIn() && pharmacyOwnerMatchesShift(pharmacyId, request.auth.uid) && resource != null;
    }


    function pharmacyOwnerMatchesShift(pharmacyId, userId) {
      return get(/databases/$(database)/documents/pharmacies/$(pharmacyId)).data.userId == userId;
    }
  }
}