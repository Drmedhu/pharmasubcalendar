/**
 * @fileoverview Firestore Security Rules for the Shift substitution application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies and shifts, ensuring that only the creator (identified by `userId`) can modify or delete them.
 * User profiles are self-owned and only modifiable by the authenticated user.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Pharmacies and shifts are owned by the user who created them, enforced through the `userId` field.
 * - User profiles are self-owned and can only be created, updated, or deleted by the authenticated user with matching UID.
 * - Listing of all pharmacies and shifts is allowed, shifts are intended to be publicly visible.
 *
 * Denormalization for Authorization:
 * - The `Shift` entity includes a `userId` field, duplicating the user's ID for easy authorization checks on shift creation and modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure pharmacy documents, allowing read access to all, but restricting creation, updates, and deletions to the owner.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list) Public read access.
     * @allow (create) Only the authenticated user can create a pharmacy with their user ID.
     * @allow (update, delete) Only the owner of the pharmacy can update or delete it.
     * @deny (create) If the userId doesn't match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner.
     * @principle Public read, owner-only write.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure shift documents, allowing read access to all, but restricting creation, updates, and deletions to the owner.
     * @path /shifts/{shiftId}
     * @allow (get, list) Public read access.
     * @allow (create) Only the authenticated user can create a shift with their user ID.
     * @allow (update, delete) Only the owner of the shift can update or delete it.
     * @deny (create) If the userId doesn't match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner.
     * @principle Public read, owner-only write.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure user profile documents, ensuring only the authenticated user can manage their own profile.
     * @path /userProfiles/{userId}
     * @allow (get, list) Only the authenticated user can get or list their own profile.
     * @allow (create) Only the authenticated user can create a profile with their own user ID.
     * @allow (update, delete) Only the owner of the profile can update or delete it.
     * @deny (create) If the userId doesn't match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner.
     * @principle Owner-only access to user profile.
     */
    match /userProfiles/{userId} {
        allow get, list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}