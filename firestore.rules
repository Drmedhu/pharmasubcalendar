/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for pharmacies, shifts, and user profiles.
 * Pharmacies can only be created, read, updated, or deleted by their respective owners.
 * Shifts are publicly readable but can only be created, updated, or deleted by the pharmacy owner.
 * User profiles are only accessible by the user themselves.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Pharmacy information, owned by a user.
 * - /shifts/{shiftId}: Shift information, associated with a pharmacy.
 * - /userProfiles/{userId}: User profile information, owned by a user.
 *
 * Key Security Decisions:
 * - Pharmacies are not listable.
 * - Public read access to Shifts.
 * - Strict ownership for all write operations.
 * - UserProfiles can be created only by the authenticated user.
 *
 * Denormalization for Authorization:
 * - The `userId` field is present on both Pharmacy and Shift documents to enforce ownership. This avoids needing to perform additional reads to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function to check if a user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function to check if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner function to check if the request is made by the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the /pharmacies collection.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) Authenticated user creates a pharmacy with their userId.
     * @deny (create) Unauthenticated user attempts to create a pharmacy.
     * @deny (create) Authenticated user attempts to create a pharmacy with a mismatched userId.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Security rules for the /shifts collection.
     * @path /shifts/{shiftId}
     * @allow (get) Anyone can get a shift.
     * @allow (list) Anyone can list shifts.
     * @allow (create) Authenticated pharmacy owner creates a shift with their pharmacyId.
     * @deny (create) Unauthenticated user attempts to create a shift.
     * @deny (update) Non-owner attempts to update a shift.
     * @deny (delete) Non-owner attempts to delete a shift.
     * @principle Public read access with owner-only writes.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Security rules for the /userProfiles collection.
     * @path /userProfiles/{userId}
     * @allow (create) Authenticated user creates their own profile.
     * @deny (create) Authenticated user attempts to create a profile for another user.
     * @allow (get) Authenticated user can get their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (list) User profiles cannot be listed.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    }
  }
}