/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for pharmacies, shifts, and user profiles.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Pharmacies, Shifts and UserProfiles are private to the owner.
 * - Listing pharmacies, shifts and userprofiles is not allowed to prevent data leaks.
 * - Data consistency between the path and the document's internal fields is enforced.
 * - All write operations must be performed by an authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /pharmacies collection.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with ID 'user_abc' can create a pharmacy document if request.resource.data.userId == 'user_abc'.
     * @allow (get) User with ID 'user_abc' can get the pharmacy document with ID 'pharmacy_123' if they are the owner.
     * @allow (update) User with ID 'user_abc' can update the pharmacy document with ID 'pharmacy_123' if they are the owner.
     * @allow (delete) User with ID 'user_abc' can delete the pharmacy document with ID 'pharmacy_123' if they are the owner.
     * @deny (create) User with ID 'user_def' cannot create a pharmacy document with request.resource.data.userId == 'user_abc'.
     * @deny (get) User with ID 'user_def' cannot get the pharmacy document with ID 'pharmacy_123' if they are not the owner.
     * @deny (update) User with ID 'user_def' cannot update the pharmacy document with ID 'pharmacy_123' if they are not the owner.
     * @deny (delete) User with ID 'user_def' cannot delete the pharmacy document with ID 'pharmacy_123' if they are not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /shifts collection.
     * @path /shifts/{shiftId}
     * @allow (create) User with ID 'user_abc' can create a shift document if request.resource.data.userId == 'user_abc'.
     * @allow (get) User with ID 'user_abc' can get the shift document with ID 'shift_123' if they are the owner.
     * @allow (update) User with ID 'user_abc' can update the shift document with ID 'shift_123' if they are the owner.
     * @allow (delete) User with ID 'user_abc' can delete the shift document with ID 'shift_123' if they are the owner.
     * @deny (create) User with ID 'user_def' cannot create a shift document with request.resource.data.userId == 'user_abc'.
     * @deny (get) User with ID 'user_def' cannot get the shift document with ID 'shift_123' if they are not the owner.
     * @deny (update) User with ID 'user_def' cannot update the shift document with ID 'shift_123' if they are not the owner.
     * @deny (delete) User with ID 'user_def' cannot delete the shift document with ID 'shift_123' if they are not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /userProfiles collection.
     * @path /userProfiles/{userId}
     * @allow (create) User with ID 'user_abc' can create their user profile if userId == 'user_abc'.
     * @allow (get) User with ID 'user_abc' can get their user profile if userId == 'user_abc'.
     * @allow (update) User with ID 'user_abc' can update their user profile if userId == 'user_abc'.
     * @allow (delete) User with ID 'user_abc' can delete their user profile if userId == 'user_abc'.
     * @deny (create) User with ID 'user_def' cannot create a profile for user 'user_abc'.
     * @deny (get) User with ID 'user_def' cannot get the profile of user 'user_abc'.
     * @deny (update) User with ID 'user_def' cannot update the profile of user 'user_abc'.
     * @deny (delete) User with ID 'user_def' cannot delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}