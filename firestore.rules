/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a user-ownership model for user profiles and pharmacies, 
 *                  allowing only the authenticated user to read and write their own profile data. 
 *                  Shifts are publicly readable but writable only by authorized users (pharmacies) that own them.
 * @data-structure
 *  - /pharmacies/{pharmacyId}: Stores pharmacy profiles. 'pharmacyId' is the document ID.
 *  - /shifts/{shiftId}: Stores shift data.
 *  - /userProfiles/{userId}: Stores user profile data. 'userId' is the document ID and must match the authenticated user's UID.
 * @key-security-decisions
 *  - Users can only read and write their own profile.
 *  - Pharmacies can create, update, and delete shifts they own, but anyone can read shifts.
 *  - User listing is disallowed for privacy.
 * @denormalization-for-authorization
 *  - Pharmacies and Shifts both have a `userId` field to identify the owning user, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get) Authenticated user can read their own profile.
     *   Example: request.auth.uid == 'user123' (get)
     * @deny (get) Authenticated user cannot read another user's profile.
     *   Example: request.auth.uid == 'user123', userId == 'user456' (get)
     * @allow (create) Authenticated user can create their own profile.
     *   Example: request.auth.uid == 'user123', request.resource.data.userId == 'user123' (create)
     * @deny (create) Authenticated user cannot create a profile with a mismatched userId.
     *   Example: request.auth.uid == 'user123', request.resource.data.userId == 'user456' (create)
     * @allow (update) Authenticated user can update their own profile.
     *   Example: request.auth.uid == 'user123', resource.data.userId == 'user123' (update)
     * @deny (update) Authenticated user cannot update another user's profile.
     *   Example: request.auth.uid == 'user123', resource.data.userId == 'user456' (update)
     * @deny (delete) Authenticated user cannot delete another user's profile.
     *   Example: request.auth.uid == 'user123', resource.data.userId == 'user456' (delete)
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to pharmacy documents.
     * @path /pharmacies/{pharmacyId}
     * @allow (get) Anyone can read a pharmacy profile.
     *   Example: (get)
     * @deny (create) Only the pharmacy owner can create a pharmacy profile.
     *   Example: request.auth.uid != request.resource.data.userId (create)
     * @allow (create) The pharmacy owner can create their own profile.
     *   Example: request.auth.uid == request.resource.data.userId (create)
     * @allow (update) Only the pharmacy owner can update their own profile.
     *   Example: request.auth.uid == resource.data.userId (update)
     * @deny (update) Another user cannot update this pharmacy profile.
     *   Example: request.auth.uid != resource.data.userId (update)
     * @allow (delete) Only the pharmacy owner can delete their own profile.
     *   Example: request.auth.uid == resource.data.userId (delete)
     * @deny (delete) Another user cannot delete this pharmacy profile.
     *   Example: request.auth.uid != resource.data.userId (delete)
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to shift documents.
     * @path /shifts/{shiftId}
     * @allow (get) Anyone can read a shift.
     *   Example: (get)
     * @allow (list) Anyone can list shifts.
     *   Example: (list)
     * @allow (create) Only the pharmacy owner can create a shift.
     *   Example: request.auth.uid == request.resource.data.userId (create)
     * @deny (create) Another user cannot create shifts for this pharmacy.
     *   Example: request.auth.uid != request.resource.data.userId (create)
     * @allow (update) Only the pharmacy owner can update a shift.
     *   Example: request.auth.uid == resource.data.userId (update)
     * @deny (update) Another user cannot update this shift.
     *   Example: request.auth.uid != resource.data.userId (update)
     * @allow (delete) Only the pharmacy owner can delete a shift.
     *   Example: request.auth.uid == resource.data.userId (delete)
     * @deny (delete) Another user cannot delete this shift.
     *   Example: request.auth.uid != resource.data.userId (delete)
     * @principle Enforces document ownership for writes.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}