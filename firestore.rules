/**
 * @fileoverview Firestore Security Rules for the ShiftFinder application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies and shifts,
 * ensuring that only the creator of a pharmacy or shift can modify or delete it.
 * User profiles are also protected under an ownership model.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy profiles.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Pharmacies and shifts are owned by the user who created them, enforced via the `userId` field.
 * - User profiles are only accessible and modifiable by the user themselves.
 * - Data validation is relaxed during this prototyping phase to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - The `userId` field is included in both `/pharmacies` and `/shifts` documents to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /pharmacies collection.
     * @path /databases/{database}/documents/pharmacies/{pharmacyId}
     * @allow (create) User with auth UID 'user_abc' can create a pharmacy if request.resource.data.userId matches their UID.
     * @allow (update) User with auth UID 'user_abc' can update a pharmacy if they are the owner.
     * @allow (delete) User with auth UID 'user_abc' can delete a pharmacy if they are the owner.
     * @deny (create) User with auth UID 'user_xyz' cannot create a pharmacy if request.resource.data.userId does not match their UID.
     * @deny (update) User with auth UID 'user_xyz' cannot update a pharmacy if they are not the owner.
     * @deny (delete) User with auth UID 'user_xyz' cannot delete a pharmacy if they are not the owner.
     * @principle Enforces document ownership for writes and validates creatorId on create.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to the /shifts collection.
     * @path /databases/{database}/documents/shifts/{shiftId}
     * @allow (create) User with auth UID 'user_abc' can create a shift if request.resource.data.userId matches their UID.
     * @allow (update) User with auth UID 'user_abc' can update a shift if they are the owner.
     * @allow (delete) User with auth UID 'user_abc' can delete a shift if they are the owner.
     * @deny (create) User with auth UID 'user_xyz' cannot create a shift if request.resource.data.userId does not match their UID.
     * @deny (update) User with auth UID 'user_xyz' cannot update a shift if they are not the owner.
     * @deny (delete) User with auth UID 'user_xyz' cannot delete a shift if they are not the owner.
     * @principle Enforces document ownership for writes and validates creatorId on create.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to the /userProfiles collection.
     * @path /databases/{database}/documents/userProfiles/{userId}
     * @allow (create) User with auth UID 'user_abc' can create their profile if the userId matches.
     * @allow (update) User with auth UID 'user_abc' can update their profile.
     * @allow (delete) User with auth UID 'user_abc' can delete their profile.
     * @deny (create) User with auth UID 'user_xyz' cannot create a profile with a userId that doesn't match.
     * @deny (update) User with auth UID 'user_xyz' cannot update another user's profile.
     * @deny (delete) User with auth UID 'user_xyz' cannot delete another user's profile.
     * @principle Enforces document ownership and validates userId on create.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User profiles should not be listable

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}