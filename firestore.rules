/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset prioritizes security and data ownership. It enforces strict access control based on user authentication and authorization. Data validation is relaxed to facilitate rapid prototyping.
 * @data_structure Data is organized into three top-level collections: `/pharmacies/{pharmacyId}`, `/shifts/{shiftId}`, and `/userProfiles/{userId}`.  Each collection stores documents representing the corresponding entity.
 * @key_security_decisions
 *   - Pharmacies, shifts, and user profiles can only be created by authenticated users.
 *   - Only the user who created a resource (pharmacy, shift) can update or delete it.
 *   - User profiles are private and only accessible to the user themselves.
 *   - Listing all shifts is publicly available.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access control for pharmacies.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user123' can create a pharmacy document where pharmacy.userId == 'user123'.
     * @allow (get) User with UID 'user123' can read any pharmacy document.
     * @allow (list) User with UID 'user123' can list any pharmacy documents.
     * @allow (update) User with UID 'user123' can update a pharmacy document where pharmacy.userId == 'user123'.
     * @allow (delete) User with UID 'user123' can delete a pharmacy document where pharmacy.userId == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a pharmacy document where pharmacy.userId != 'user123'.
     * @deny (update) User with UID 'user123' cannot update a pharmacy document where pharmacy.userId != 'user123'.
     * @deny (delete) User with UID 'user123' cannot delete a pharmacy document where pharmacy.userId != 'user123'.
     * @principle Enforces document ownership for writes. Public read access is allowed.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access control for shifts.
     * @path /shifts/{shiftId}
     * @allow (create) User with UID 'user123' can create a shift document where shift.userId == 'user123'.
     * @allow (get) User with UID 'user123' can read any shift document.
     * @allow (list) User with UID 'user123' can list all shift documents.
     * @allow (update) User with UID 'user123' can update a shift document where shift.userId == 'user123'.
     * @allow (delete) User with UID 'user123' can delete a shift document where shift.userId == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a shift document where shift.userId != 'user123'.
     * @deny (update) User with UID 'user123' cannot update a shift document where shift.userId != 'user123'.
     * @deny (delete) User with UID 'user123' cannot delete a shift document where shift.userId != 'user123'.
     * @principle Enforces document ownership for writes. Public read access is allowed.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access control for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user123' can create a user profile document where userId == 'user123'.
     * @allow (get) User with UID 'user123' can read a user profile document where userId == 'user123'.
     * @allow (list) User with UID 'user123' can list their own user profile document, but list is denied in this case.
     * @allow (update) User with UID 'user123' can update a user profile document where userId == 'user123'.
     * @allow (delete) User with UID 'user123' can delete a user profile document where userId == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a user profile document where userId != 'user123'.
     * @deny (get) User with UID 'user456' cannot read a user profile document where userId == 'user123'.
     * @deny (update) User with UID 'user123' cannot update a user profile document where userId != 'user123'.
     * @deny (delete) User with UID 'user123' cannot delete a user profile document where userId != 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}