/**
 * @fileOverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while permitting flexible data shapes.
 * It enforces strict user-ownership and role-based access where appropriate.
 * Schema validation is minimized to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, with 'userId' indicating ownership.
 * - /shifts/{shiftId}: Stores shift information, linked to a pharmacy via 'pharmacyId' and owned by a user via 'userId'.
 * - /userProfiles/{userId}: Stores user profile data, with the document ID matching the user's auth UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the 'pharmacies' collection. Only owners can modify.
 *
 * Denormalization for Authorization:
 * - Pharmacies: The 'userId' field is denormalized onto the Pharmacy document to enforce ownership.
 * - Shifts: The 'userId' field is denormalized onto the Shift document to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to pharmacies, but restricts write access to the owner.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list): Any user can read pharmacy information.
     * @allow (create): The user with auth UID 'user123' can create a pharmacy with userId 'user123'.
     * @allow (update, delete): The user with auth UID 'user123' can update/delete a pharmacy they own (userId is 'user123').
     * @deny (create): The user with auth UID 'user456' cannot create a pharmacy with userId 'user123'.
     * @deny (update, delete): The user with auth UID 'user456' cannot update/delete a pharmacy owned by 'user123'.
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Restricts access to shifts to the owner.
     * @path /shifts/{shiftId}
     * @allow (get, list): The user with auth UID 'user123' can read shifts they own (userId is 'user123').
     * @allow (create): The user with auth UID 'user123' can create a shift with userId 'user123'.
     * @allow (update, delete): The user with auth UID 'user123' can update/delete a shift they own (userId is 'user123').
     * @deny (get, list): The user with auth UID 'user456' cannot read shifts owned by 'user123'.
     * @deny (create): The user with auth UID 'user456' cannot create a shift with userId 'user123'.
     * @deny (update, delete): The user with auth UID 'user456' cannot update/delete a shift owned by 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /shifts/{shiftId} {
      allow get, list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Restricts access to user profiles to the profile owner.
     * @path /userProfiles/{userId}
     * @allow (get): The user with auth UID 'user123' can read their own profile (userId is 'user123').
     * @allow (create): The user with auth UID 'user123' can create their own profile (userId is 'user123').
     * @allow (update, delete): The user with auth UID 'user123' can update/delete their own profile (userId is 'user123').
     * @deny (get): The user with auth UID 'user456' cannot read the profile of 'user123'.
     * @deny (create): The user with auth UID 'user456' cannot create a profile for 'user123'.
     * @deny (update, delete): The user with auth UID 'user456' cannot update/delete the profile of 'user123'.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallow listing of user profiles.
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}