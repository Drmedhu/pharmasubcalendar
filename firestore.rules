/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies and user profiles. Pharmacies and Shifts are created by a user, who then has full control over them.
 * Shifts are publicly readable to facilitate discovery. User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Pharmacy information.
 * - /shifts/{shiftId}: Shift information, associated with a pharmacy.
 * - /userProfiles/{userId}: User profile information.
 *
 * Key Security Decisions:
 * - Pharmacies are owned by a user, who can create, update, and delete them.
 * - Shifts are publicly readable but can only be created, updated, or deleted by the user who created them or by an admin.
 * - User profiles are private and only accessible to the owning user.
 * - Listing of pharmacies and shifts is allowed. Listing of user profiles is not allowed.
 *
 * Denormalization for Authorization:
 * - Pharmacies and Shifts both have a `userId` field to indicate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to pharmacy documents. Pharmacies can be created, updated, and deleted only by their owners.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with ID 'user123' creates a new pharmacy with pharmacyId 'pharmacy456' and userId 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a pharmacy with pharmacyId 'pharmacy456' and userId 'user456'.
     * @allow (get) Any user can retrieve pharmacy information.
     * @allow (list) Any user can list pharmacies.
     * @allow (update) User with ID 'user123' updates pharmacy with pharmacyId 'pharmacy456' where the original userId is 'user123'.
     * @allow (delete) User with ID 'user123' deletes pharmacy with pharmacyId 'pharmacy456' where the original userId is 'user123'.
     * @deny (update) User with ID 'user456' attempts to update pharmacy with pharmacyId 'pharmacy456' where the original userId is 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete pharmacy with pharmacyId 'pharmacy456' where the original userId is 'user123'.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access to shift documents. Shifts are publicly readable, but can only be created, updated, and deleted by their owners.
     * @path /shifts/{shiftId}
     * @allow (create) User with ID 'user123' creates a new shift with shiftId 'shift456' and userId 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a shift with shiftId 'shift456' and userId 'user456'.
     * @allow (get) Any user can retrieve shift information.
     * @allow (list) Any user can list shifts.
     * @allow (update) User with ID 'user123' updates shift with shiftId 'shift456' where the original userId is 'user123'.
     * @allow (delete) User with ID 'user123' deletes shift with shiftId 'shift456' where the original userId is 'user123'.
     * @deny (update) User with ID 'user456' attempts to update shift with shiftId 'shift456' where the original userId is 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete shift with shiftId 'shift456' where the original userId is 'user123'.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access to user profile documents. Only the owning user can read, create, update, or delete their profile.
     * @path /userProfiles/{userId}
     * @allow (create) User with ID 'user123' creates a new profile with userId 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a profile with userId 'user456'.
     * @allow (get) User with ID 'user123' retrieves their own profile (userId 'user123').
     * @deny (get) User with ID 'user123' attempts to retrieve profile of user with ID 'user456'.
     * @allow (update) User with ID 'user123' updates their own profile (userId 'user123').
     * @allow (delete) User with ID 'user123' deletes their own profile (userId 'user123').
     * @deny (update) User with ID 'user123' attempts to update profile of user with ID 'user456'.
     * @deny (delete) User with ID 'user123' attempts to delete profile of user with ID 'user456'.
     * @principle Restricts access to a user's own data tree. Enforces document ownership.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}