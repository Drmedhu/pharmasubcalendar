/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and pharmacies,
 *              allowing only authenticated users to manage their own data. Shifts are readable by anyone,
 *              but creation, modification, and deletion are restricted to the shift's owner and pharmacy owner.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data, with the document ID matching the user's UID.
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, with the document ID being a unique pharmacy ID. Contains a userId field indicating the owner.
 * - /shifts/{shiftId}: Stores shift data, with each shift belonging to a pharmacy and optionally booked by a user.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible/manageable by the owning user.
 * - Pharmacies are owned by a user.
 * - Listing of user profiles is disallowed to prevent data leakage.
 * - Shifts are readable by anyone.
 *
 * Denormalization for Authorization:
 * - Pharmacies documents have a `userId` field representing the owner to avoid needing a separate lookup.
 * - Shift documents have both a `pharmacyId` and a `userId` field to allow shift writes to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user123' creates profile with userId: 'user123'.
     * @allow (get,update,delete) User with UID 'user123' reads/updates/deletes profile with userId: 'user123'.
     * @deny (create) User with UID 'user123' attempts to create profile with userId: 'user456'.
     * @deny (get,update,delete) User with UID 'user123' attempts to read/update/delete profile with userId: 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow creation only if the user is creating their own profile.
      allow create: if isOwner(userId);

      // Allow read (get) only if the user is requesting their own profile.
      allow get: if isOwner(userId);

      // Disallow listing of all user profiles.
      allow list: if false;

      // Allow update only if the user is updating their own profile.
      allow update: if isExistingOwner(userId);

      // Allow delete only if the user is deleting their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure pharmacies. Only the authenticated user who owns the pharmacy can create, read, update, or delete it.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user123' creates pharmacy with userId: 'user123'.
     * @allow (get,update,delete) User with UID 'user123' reads/updates/deletes pharmacy they own.
     * @deny (create) User with UID 'user123' attempts to create pharmacy with userId: 'user456'.
     * @deny (get,update,delete) User with UID 'user123' attempts to read/update/delete pharmacy owned by 'user456'.
     * @principle Enforces document ownership for pharmacies.
     */
    match /pharmacies/{pharmacyId} {
      // Helper function to check if the authenticated user is the owner of the pharmacy.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing pharmacy.
      function isExistingOwner() {
        return isOwner(resource.data.userId) && resource != null;
      }

      // Allow create only if the user's UID matches the userId in the data.
      allow create: if isOwner(request.resource.data.userId);

      // Allow read (get) if the user is the owner.
      allow get: if isOwner(resource.data.userId);

      // Allow list if the user is the owner.
      allow list: if isOwner(request.auth.uid);

      // Allow update only if the user is the owner and the userId is immutable.
      allow update: if isExistingOwner() && request.resource.data.userId == resource.data.userId;

      // Allow delete only if the user is the owner.
      allow delete: if isExistingOwner();
    }

    /**
     * @description Secure shifts.  Shifts are readable by anyone but creation, updates, and deletion are restricted to the shift's owner (user who created the shift) or the pharmacy owner.
     * @path /shifts/{shiftId}
     * @allow (get,list) Any user can read/list shifts.
     * @allow (create) User with UID 'user123' creates shift with userId: 'user123'.
     * @allow (update,delete) User with UID 'user123' updates/deletes shift with userId: 'user123'.
     * @deny (create) User with UID 'user123' attempts to create shift with userId: 'user456'.
     * @deny (update,delete) User with UID 'user123' attempts to update/delete shift owned by 'user456'.
     * @principle Public read, owner-only writes for shifts.
     */
    match /shifts/{shiftId} {
      // Helper function to check if the authenticated user is the owner of the shift.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Helper function to check if the authenticated user is the owner of an existing shift.
      function isExistingOwner() {
        return isOwner(resource.data.userId) && resource != null;
      }

      // Allow anyone to read (get) shifts.
      allow get: if true;

      // Allow anyone to list shifts.
      allow list: if true;

      // Allow create if the user is the owner of the shift
      allow create: if isOwner(request.resource.data.userId);

      // Allow update if the user is the owner of the shift and verify userId is immutable
      allow update: if isExistingOwner() && request.resource.data.userId == resource.data.userId;

      // Allow delete if the user is the owner of the shift
      allow delete: if isExistingOwner();
    }
  }
}