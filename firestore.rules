/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for pharmacies and shifts, where only the creator of a document can modify or delete it. User profiles are self-created and can only be modified by the user themselves. Public read access is granted to the 'pharmacies' collection, but write access is restricted to authenticated users who own the pharmacy. All other collections have owner-only access.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /shifts/{shiftId}: Stores shift information.
 * - /userProfiles/{userId}: Stores user profiles.
 *
 * Key Security Decisions:
 * - Pharmacies are publicly readable, but only the owner can modify them.
 * - Users can only create and modify their own user profiles.
 * - Listing of shifts is restricted to the owner.
 * - Shift writes are restricted to the owner.
 *
 * Denormalization for Authorization:
 * - The `Pharmacy` and `Shift` entities include a `userId` field to track ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read pharmacy information, but only the owner can create, update, or delete it.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list): Any user can read pharmacy information.
     * @allow (create): Authenticated user can create a pharmacy if the `userId` matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete a pharmacy if the `userId` matches their auth UID and the document exists.
     * @deny (create): User tries to create a pharmacy with a `userId` that doesn't match their auth UID.
     * @deny (update, delete): User tries to update/delete a pharmacy where the `userId` doesn't match their auth UID or the document does not exist.
     * @principle Allows public read access to pharmacy data while restricting write access to the owner.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows only the owner to manage shifts.
     * @path /shifts/{shiftId}
     * @allow (get, list): Authenticated user can read if the `userId` matches their auth UID.
     * @allow (create): Authenticated user can create a shift if the `userId` matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete a shift if the `userId` matches their auth UID and the document exists.
     * @deny (get, list): User tries to read shift where the `userId` doesn't match their auth UID.
     * @deny (create): User tries to create a shift with a `userId` that doesn't match their auth UID.
     * @deny (update, delete): User tries to update/delete a shift where the `userId` doesn't match their auth UID or the document does not exist.
     * @principle Enforces document ownership for all operations on shifts.
     */
    match /shifts/{shiftId} {
      allow get, list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows a user to create and manage their own profile.
     * @path /userProfiles/{userId}
     * @allow (get): Authenticated user can get their own profile.
     * @allow (create): Authenticated user can create their profile if the `userId` matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete their profile if the `userId` matches their auth UID and the document exists.
     * @allow (list): Authenticated user can list their own profile.
     * @deny (get): User tries to get another user's profile.
     * @deny (create): User tries to create a profile with a `userId` that doesn't match their auth UID.
     * @deny (update, delete): User tries to update/delete another user's profile or a non-existent profile.
     * @principle Restricts access to a user's own data tree and validates relational integrity.
     */
    match /userProfiles/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}