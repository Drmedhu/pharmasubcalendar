/**
 * @fileoverview Firestore Security Rules for a pharmacy shift booking application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and public-read/owner-write access control.
 * User-specific data (pharmacies, substitutes) is protected by ownership checks,
 * while shift information is publicly readable but restricted to pharmacy owners for modifications.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy profiles, accessible only to the pharmacy itself.
 * - /substitutes/{substituteId}: Stores substitute pharmacist profiles, accessible only to the substitute.
 * - /shifts/{shiftId}: Stores shift details, publicly readable but writable only by the owning pharmacy.
 * - /bookings/{bookingId}: Stores booking information, writable by anyone.
 *
 * Key Security Decisions:
 * - Pharmacies and Substitutes can only be created, read, updated, and deleted by themselves (ownership model).
 * - Shifts are publicly readable but can only be created, updated, and deleted by the owning pharmacy. The `pharmacyId` field within the shift document is used to enforce this ownership.
 * - Bookings can be created by anyone.
 * - Listing of users is denied.
 *
 * Denormalization for Authorization:
 * - The `shifts` documents contain `pharmacyId`, denormalizing the pharmacy ownership of the shift. This avoids needing to perform a `get()` operation on the `/pharmacies/{pharmacyId}` document to check ownership when modifying a shift.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants pharmacies owner-only access to their profiles.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) - A pharmacy with ID 'pharmacy123' can create its profile if authenticated as 'pharmacy123'.
     * @allow (get) - A pharmacy with ID 'pharmacy123' can read its profile if authenticated as 'pharmacy123'.
     * @allow (update) - A pharmacy with ID 'pharmacy123' can update its profile if authenticated as 'pharmacy123'.
     * @allow (delete) - A pharmacy with ID 'pharmacy123' can delete its profile if authenticated as 'pharmacy123'.
     * @deny (create) - A pharmacy with ID 'pharmacy123' cannot create a profile with ID 'otherPharmacy'.
     * @deny (get) - A user not authenticated as 'pharmacy123' cannot read the profile of 'pharmacy123'.
     * @principle Enforces document ownership for all operations.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if isSignedIn() && isOwner(pharmacyId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(pharmacyId) && request.resource.data.id == pharmacyId;
      allow update: if isSignedIn() && isExistingOwner(pharmacyId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(pharmacyId);
    }

    /**
     * @description Grants substitutes owner-only access to their profiles.
     * @path /substitutes/{substituteId}
     * @allow (create) - A substitute with ID 'sub123' can create their profile if authenticated as 'sub123'.
     * @allow (get) - A substitute with ID 'sub123' can read their profile if authenticated as 'sub123'.
     * @allow (update) - A substitute with ID 'sub123' can update their profile if authenticated as 'sub123'.
     * @allow (delete) - A substitute with ID 'sub123' can delete their profile if authenticated as 'sub123'.
     * @deny (create) - A substitute with ID 'sub123' cannot create a profile with ID 'otherSub'.
     * @deny (get) - A user not authenticated as 'sub123' cannot read the profile of 'sub123'.
     * @principle Enforces document ownership for all operations.
     */
    match /substitutes/{substituteId} {
      allow get: if isSignedIn() && isOwner(substituteId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(substituteId) && request.resource.data.id == substituteId;
      allow update: if isSignedIn() && isExistingOwner(substituteId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(substituteId);
    }

    /**
     * @description Allows public read access to shifts, but restricts writes to the owning pharmacy.
     * @path /shifts/{shiftId}
     * @allow (get) - Any user can read a shift.
     * @allow (list) - Any user can list shifts.
     * @allow (create) - A pharmacy can create a shift, provided the 'pharmacyId' matches their auth UID.
     * @allow (update) - A pharmacy can update a shift they own, verified by matching the 'pharmacyId' in the document.
     * @allow (delete) - A pharmacy can delete a shift they own.
     * @deny (create) - A pharmacy cannot create a shift with a 'pharmacyId' that doesn't match their auth UID.
     * @deny (update) - A pharmacy cannot update a shift they don't own.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.pharmacyId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfShift(resource.data.pharmacyId);
      allow delete: if isSignedIn() && isExistingOwnerOfShift(resource.data.pharmacyId);
    }

    /**
     * @description Allows anyone to create a booking.
     * @path /bookings/{bookingId}
     * @allow (create) - Any authenticated user can create a booking.
     * @deny (update) - No one can update a booking.
     * @deny (delete) - No one can delete a booking.
     * @principle Allows public booking creation.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isExistingOwnerOfShift(pharmacyId) {
      return request.auth.uid == pharmacyId && resource != null;
    }
  }
}