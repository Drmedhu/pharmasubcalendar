/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for pharmacies and shifts, with public read access for shifts.
 *
 * Data Structure:
 * - /pharmacies/{pharmacyId}: Stores pharmacy information, with the 'pharmacyId' used as the document ID.
 * - /shifts/{shiftId}: Stores shift information related to pharmacies.
 * - /userProfiles/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Pharmacies can only be created, updated, or deleted by their owners (the user who created them).
 * - Shifts can be created by authenticated users.
 * - User Profiles are private and only accessible to the respective user.
 * - Public read access to shifts is allowed.
 *
 * Denormalization for Authorization:
 * - Pharmacies and Shifts have a 'userId' field, which is used to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating, reading, updating, and deleting pharmacy documents only by the user who owns them.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) - User with auth UID 'user_abc' can create a pharmacy document if request.resource.data.userId == 'user_abc'.
     * @allow (get) - User can get a pharmacy.
     * @allow (list) - User can list pharmacies.
     * @allow (update) - User with auth UID 'user_abc' can update a pharmacy document they own if request.resource.data.userId == 'user_abc'.
     * @allow (delete) - User with auth UID 'user_abc' can delete a pharmacy document they own if resource.data.userId == 'user_abc'.
     * @deny (create) - User with auth UID 'user_xyz' cannot create a pharmacy document if request.resource.data.userId == 'user_abc'.
     * @deny (update) - User with auth UID 'user_xyz' cannot update a pharmacy document owned by 'user_abc'.
     * @deny (delete) - User with auth UID 'user_xyz' cannot delete a pharmacy document owned by 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /pharmacies/{pharmacyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows creating shifts only by authenticated users and allows public reads.
     * @path /shifts/{shiftId}
     * @allow (create) - User with auth UID 'user_abc' can create a shift.
     * @allow (get) - Any user can read shift data.
     * @allow (list) - Any user can list shifts.
     * @allow (update) - User with auth UID 'user_abc' can update a shift that they own if request.resource.data.userId == 'user_abc'.
     * @allow (delete) - User with auth UID 'user_abc' can delete a shift that they own if resource.data.userId == 'user_abc'.
     * @deny (create) - Non-authenticated user cannot create a shift.
     * @deny (update) - User with auth UID 'user_xyz' cannot update a shift owned by 'user_abc'.
     * @deny (delete) - User with auth UID 'user_xyz' cannot delete a shift owned by 'user_abc'.
     * @principle Enforces authentication for creates and ownership for updates/deletes, allows public read access.
     */
    match /shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows creating, reading, updating, and deleting user profile documents only by the user themselves.
     * @path /userProfiles/{userId}
     * @allow (create) - User with auth UID 'user_abc' can create their own profile.
     * @allow (get) - User with auth UID 'user_abc' can read their own profile.
     * @allow (list) - User with auth UID 'user_abc' can list their own profile.
     * @allow (update) - User with auth UID 'user_abc' can update their own profile if request.resource.data.userId == 'user_abc'.
     * @allow (delete) - User with auth UID 'user_abc' can delete their own profile.
     * @deny (create) - User with auth UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) - User with auth UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @deny (update) - User with auth UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @deny (delete) - User with auth UID 'user_xyz' cannot delete the profile of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == userId;
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}