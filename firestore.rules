/**
 * @fileoverview Firestore Security Rules for the shift scheduling application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and pharmacies.
 * Shifts are also owner-controlled.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores profile information for each user, with the document ID matching the Firebase auth UID.
 * - /pharmacies/{pharmacyId}: Stores information about pharmacies, with each document ID being unique.
 * - /shifts/{shiftId}: Stores information about shifts.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Pharmacies can only be created, updated, or deleted by their owners.
 * - Shifts can only be created, updated, or deleted by their owners (the pharmacy).
 * - Listing of user profiles is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - Pharmacies and Shifts have a 'userId' field to directly link them to the creating user for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (list) No one can list user profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces access control for pharmacies.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user_abc' can create a pharmacy with userId 'user_abc'.
     * @allow (get) Any user can read pharmacy information.
     * @allow (list) Any user can list pharmacies.
     * @allow (update) User with UID 'user_abc' can update a pharmacy they own.
     * @allow (delete) User with UID 'user_abc' can delete a pharmacy they own.
     * @deny (create) User with UID 'user_xyz' cannot create a pharmacy with userId 'user_abc'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pharmacies/{pharmacyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Enforces access control for shifts.
     * @path /shifts/{shiftId}
     * @allow (create) User with UID 'user_abc' can create a shift with userId 'user_abc'.
     * @allow (get) Any user can read shift information.
     * @allow (list) Any user can list shifts.
     * @allow (update) User with UID 'user_abc' can update a shift they own.
     * @allow (delete) User with UID 'user_abc' can delete a shift they own.
     * @deny (create) User with UID 'user_xyz' cannot create a shift with userId 'user_abc'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
  }
}