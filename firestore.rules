rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile at /userProfiles/user_abc.
     * @allow (update) User with UID 'user_abc' can update their own profile at /userProfiles/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their own profile at /userProfiles/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile for /userProfiles/user_xyz.
     * @deny (update) User with UID 'user_abc' cannot update the profile at /userProfiles/user_xyz.
     * @deny (delete) User with UID 'user_abc' cannot delete the profile at /userProfiles/user_xyz.
     * @principle Enforces document ownership for writes and reads, ensures authenticated user can only access their profile.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isSignedIn() && isCreatingOwnProfile(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to pharmacy information.
     * @path /pharmacies/{pharmacyId}
     * @allow (create) User with UID 'user_abc' can create a pharmacy with userId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a pharmacy they own (userId 'user_abc').
     * @allow (delete) User with UID 'user_abc' can delete a pharmacy they own (userId 'user_abc').
     * @deny (create) User with UID 'user_abc' cannot create a pharmacy with userId 'user_xyz'.
     * @deny (update) User with UID 'user_abc' cannot update a pharmacy owned by 'user_xyz'.
     * @deny (delete) User with UID 'user_abc' cannot delete a pharmacy owned by 'user_xyz'.
     * @principle Enforces document ownership for writes, ensures users can only manage their own pharmacies.
     */
    match /pharmacies/{pharmacyId} {
      allow get: if isSignedIn() && isOwnerOfPharmacy();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwnerOfPharmacy();
      allow delete: if isSignedIn() && isOwnerOfPharmacy();
    }

    /**
     * @description Controls access to shift information.
     * @path /shifts/{shiftId}
     * @allow (create) User with UID 'user_abc' can create a shift with userId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a shift they own (userId 'user_abc').
     * @allow (delete) User with UID 'user_abc' can delete a shift they own (userId 'user_abc').
     * @deny (create) User with UID 'user_abc' cannot create a shift with userId 'user_xyz'.
     * @deny (update) User with UID 'user_abc' cannot update a shift owned by 'user_xyz'.
     * @deny (delete) User with UID 'user_abc' cannot delete a shift owned by 'user_xyz'.
     * @principle Enforces document ownership for writes, ensures users can only manage their own shifts.
     */
    match /shifts/{shiftId} {
      allow get: if isSignedIn() && isOwnerOfShift();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwnerOfShift();
      allow delete: if isSignedIn() && isOwnerOfShift();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isCreatingOwnProfile(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isOwnerOfPharmacy() {
    return resource.data.userId == request.auth.uid;
  }

    function isOwnerOfShift() {
    return resource.data.userId == request.auth.uid;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isUserIdNotChanged(userId) {
    return request.resource.data.userId == resource.data.userId;
  }
}