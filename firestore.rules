/**
 * @fileoverview Firestore Security Rules for the pharmacy app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/profile`. Only the user can access their profile.
 * - Shifts posted by pharmacies are stored under `/users/{pharmacyId}/shifts/{shiftId}`. Only the pharmacy can manage their shifts.
 * - Substitute availabilities are stored under `/users/{substituteId}/availability/{availabilityId}`. Only the substitute can manage their availability.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the authenticated user.
 * - Pharmacies can only manage shifts they have posted.
 * - Substitutes can only manage their own availability.
 * - Listing of all user profiles is disallowed.
 *
 * Denormalization for Authorization:
 *  - The `userId` is encoded in the document path (e.g., `/users/{userId}/profile`), eliminating the need to store it within the document itself and reducing complexity for authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership. Only the authenticated user can read/write their profile.
     * @path /users/{userId}/profile
     * @allow (get, create, update, delete) if the authenticated user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the authenticated user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to shifts based on ownership. Only the pharmacy that posted the shift can manage it.
     * @path /users/{pharmacyId}/shifts/{shiftId}
     * @allow (get, create, update, delete) if the authenticated user's UID matches the pharmacyId in the path.
     * @deny (get, create, update, delete) if the authenticated user's UID does not match the pharmacyId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{pharmacyId}/shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(pharmacyId) {
        return request.auth.uid == pharmacyId;
      }

      function isExistingOwner(pharmacyId) {
        return isOwner(pharmacyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(pharmacyId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(pharmacyId);
      allow update: if isSignedIn() && isExistingOwner(pharmacyId);
      allow delete: if isSignedIn() && isExistingOwner(pharmacyId);
    }

    /**
     * @description Grants access to substitute availabilities based on ownership. Only the substitute can manage their availability.
     * @path /users/{substituteId}/availability/{availabilityId}
     * @allow (get, create, update, delete) if the authenticated user's UID matches the substituteId in the path.
     * @deny (get, create, update, delete) if the authenticated user's UID does not match the substituteId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{substituteId}/availability/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(substituteId) {
        return request.auth.uid == substituteId;
      }

      function isExistingOwner(substituteId) {
        return isOwner(substituteId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(substituteId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(substituteId);
      allow update: if isSignedIn() && isExistingOwner(substituteId);
      allow delete: if isSignedIn() && isExistingOwner(substituteId);
    }
  }
}